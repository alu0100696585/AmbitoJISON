/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calculator = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"prog":3,"block":4,"DOT":5,"EOF":6,"constt":7,"vaar":8,"proc":9,"st":10,"PROCEDURE":11,"name":12,"(":13,"pargsp":14,")":15,";":16,"arg":17,"ID":18,"CONST":19,"cvrb":20,"=":21,"NUMBER":22,"COMMA":23,"VAR":24,"vrb":25,"expressions":26,"e":27,"IF":28,"condition":29,"THEN":30,"ELSE":31,"WHILE":32,"DO":33,"BEGIN":34,"END":35,"CALL":36,"llamada":37,"COMPARISON":38,"ODD":39,"PI":40,"E":41,"+":42,"-":43,"*":44,"/":45,"^":46,"!":47,"%":48,"$accept":0,"$end":1},
terminals_: {2:"error",5:"DOT",6:"EOF",11:"PROCEDURE",13:"(",15:")",16:";",18:"ID",19:"CONST",21:"=",22:"NUMBER",23:"COMMA",24:"VAR",28:"IF",30:"THEN",31:"ELSE",32:"WHILE",33:"DO",34:"BEGIN",35:"END",36:"CALL",38:"COMPARISON",39:"ODD",40:"PI",41:"E",42:"+",43:"-",44:"*",45:"/",46:"^",47:"!",48:"%"},
productions_: [0,[3,3],[4,4],[9,0],[9,8],[14,1],[12,1],[7,0],[7,2],[20,4],[20,5],[8,0],[8,2],[25,2],[25,3],[26,1],[26,3],[10,0],[10,1],[10,6],[10,4],[10,4],[10,4],[10,5],[17,0],[17,1],[17,3],[37,0],[37,1],[37,3],[29,3],[29,3],[29,3],[29,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,2],[27,3],[27,1],[27,1],[27,1],[27,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
          var table = symbolTables;
          
          symbolTables = [{name: 'global', father: null , vars: {}}];
          scope = 0;
	  symbol_table = symbolTables[scope];
          
          
          this.$ = $$[$0-2]; 
          console.log(this.$);
          return [this.$, table];
        
break;
case 2: this.$ = { cnst:$$[$0-3] , V:$$[$0-2] , proc:$$[$0-1], st:$$[$0] };
break;
case 4: 
	  this.$ = { type: 'procedure' , left: $$[$0-6], argumentos: $$[$0-4] , right: $$[$0-1] }; 
	
break;
case 5:
	this.$ = $$[$0];
      
break;
case 6:
	symbol_table.vars[$$[$0]] = {type: 'proc'};
	makeScope($$[$0]);
	this.$ = $$[$0];
      
break;
case 8: 
	  this.$ = {type: 'CONST' , constantes: $$[$0]};
	
break;
case 9:
        symbol_table.vars[$$[$0-3]] = {type: 'const', valor: $$[$0-1]};
	this.$ = {type: '=', left: $$[$0-3] , right: $$[$0-1]};
      
break;
case 10: 
	symbol_table.vars[$$[$0-4]] = {type: 'const', valor: $$[$0-2]};
	this.$ = [{type: '=', left: $$[$0-4] , right: $$[$0-2]}];
	this.$ = this.$.concat($$[$0]);
      
break;
case 12: this.$ = {type: 'VAR' , variables: $$[$0]}; 
break;
case 13:
        symbol_table.vars[$$[$0-1]] = {type: 'var'};
	this.$ = [$$[$0-1]];
      
break;
case 14: 
        symbol_table.vars[$$[$0-2]] = {type: 'var'};
	this.$ = [{type: 'VAR', id:$$[$0-2] }];
	this.$ = this.$.concat($$[$0]);
      
break;
case 15: this.$ = (typeof $$[$0] === 'undefined')? [] : [ $$[$0] ]; 
break;
case 16: this.$ = $$[$0-2];
          if ($$[$0]) this.$.push($$[$0]); 
          console.log(this.$);
        
break;
case 19:this.$ = {type: 'ifelse', condicion: $$[$0-4] , if: $$[$0-2] , else: $$[$0]};
break;
case 20:this.$ = {type: 'if', condicion: $$[$0-2] , if: $$[$0]};
break;
case 21:this.$ = {type:'while', condicion: $$[$0-2] , do: $$[$0]};
break;
case 22:this.$ = $$[$0-2];
break;
case 23: this.$ = {type: 'call' , id:$$[$0-3] , lista: $$[$0-1]}; 
break;
case 24:this.$ = [];
break;
case 25:
        symbol_table.vars[$$[$0]] = {type: 'var'};
	this.$ = [$$[$0]];
      
break;
case 26:
        symbol_table.vars[$$[$0-2]] = {type: 'var'};
	this.$ = [$$[$0-2]].concat($$[$0]);
      
break;
case 27:this.$ = [];
break;
case 28:this.$ = [$$[$0]];
break;
case 29:this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 30:
	 this.$ = { type: $$[$0-1] , left: $$[$0-2] , right:$$[$0] }; 
	
break;
case 31:
	 this.$ = { type: $$[$0-1] , left: $$[$0-2] , right:$$[$0] }; 
	
break;
case 32:
	 this.$ = { type: $$[$0-1] , left: $$[$0-2] , right:$$[$0] }; 
	
break;
case 33:this.$ = {type: 'odd', odd: $$[$0]};
break;
case 34: this.$ = {type:'ID' , left:$$[$0]}; 
break;
case 35: throw new Error("Can't assign to constant 'Ï€'"); 
break;
case 36: throw new Error("Can't assign to math constant 'e'"); 
break;
case 37:this.$ = {type: $$[$0-1] , left: $$[$0-2] , right: $$[$0]};
break;
case 38:this.$ = {type: $$[$0-1] , left: $$[$0-2] , right: $$[$0]};
break;
case 39:this.$ = {type: $$[$0-1] , left: $$[$0-2] , right: $$[$0]};
break;
case 40:
          if ($$[$0] == 0) throw new Error("Division by zero, error!");
          this.$ = {type: $$[$0-1] , left: $$[$0-2] , right: $$[$0]};;
        
break;
case 41:this.$ = {type: $$[$0-1] , left: $$[$0-2] , right: $$[$0]};
break;
case 42:
          if ($$[$0-1] % 1 !== 0) 
             throw "Error! Attempt to compute the factorial of "+
                   "a floating point number "+$$[$0-1];
          this.$ = {type: $$[$0] , left: $$[$0-1]};
        
break;
case 43:this.$ = {type: $$[$0] , left: $$[$0-1] , right: 100};
break;
case 44:this.$ = -$$[$0];
break;
case 45:this.$ = $$[$0-1];
break;
case 46:this.$ = Number(yytext);
break;
case 47:this.$ = Math.E;
break;
case 48:this.$ = Math.PI;
break;
case 49: this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,5:[2,7],7:3,11:[2,7],13:[2,7],18:[2,7],19:[1,4],22:[2,7],24:[2,7],28:[2,7],32:[2,7],34:[2,7],36:[2,7],40:[2,7],41:[2,7],43:[2,7]},{1:[3]},{5:[1,5]},{5:[2,11],8:6,11:[2,11],13:[2,11],16:[2,11],18:[2,11],22:[2,11],24:[1,7],28:[2,11],32:[2,11],34:[2,11],36:[2,11],40:[2,11],41:[2,11],43:[2,11]},{18:[1,9],20:8},{6:[1,10]},{5:[2,3],9:11,11:[1,12],13:[2,3],16:[2,3],18:[2,3],22:[2,3],28:[2,3],32:[2,3],34:[2,3],36:[2,3],40:[2,3],41:[2,3],43:[2,3]},{18:[1,14],25:13},{5:[2,8],11:[2,8],13:[2,8],16:[2,8],18:[2,8],22:[2,8],24:[2,8],28:[2,8],32:[2,8],34:[2,8],36:[2,8],40:[2,8],41:[2,8],43:[2,8]},{21:[1,15]},{1:[2,1]},{5:[2,17],10:16,13:[1,26],16:[2,17],18:[1,22],22:[1,27],27:17,28:[1,18],32:[1,19],34:[1,20],36:[1,21],40:[1,23],41:[1,24],43:[1,25]},{12:28,18:[1,29]},{5:[2,12],11:[2,12],13:[2,12],16:[2,12],18:[2,12],22:[2,12],28:[2,12],32:[2,12],34:[2,12],36:[2,12],40:[2,12],41:[2,12],43:[2,12]},{16:[1,30],23:[1,31]},{22:[1,32]},{5:[2,2],16:[2,2]},{5:[2,18],16:[2,18],31:[2,18],42:[1,33],43:[1,34],44:[1,35],45:[1,36],46:[1,37],47:[1,38],48:[1,39]},{18:[1,42],22:[1,41],29:40,39:[1,43]},{18:[1,42],22:[1,41],29:44,39:[1,43]},{10:46,13:[1,26],16:[2,17],18:[1,22],22:[1,27],26:45,27:17,28:[1,18],32:[1,19],34:[1,20],36:[1,21],40:[1,23],41:[1,24],43:[1,25]},{18:[1,47]},{5:[2,49],15:[2,49],16:[2,49],21:[1,48],23:[2,49],30:[2,49],31:[2,49],33:[2,49],42:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49]},{5:[2,48],15:[2,48],16:[2,48],21:[1,49],23:[2,48],30:[2,48],31:[2,48],33:[2,48],42:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48]},{5:[2,47],15:[2,47],16:[2,47],21:[1,50],23:[2,47],30:[2,47],31:[2,47],33:[2,47],42:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47]},{13:[1,26],18:[1,22],22:[1,27],27:51,40:[1,23],41:[1,24],43:[1,25]},{13:[1,26],18:[1,22],22:[1,27],27:52,40:[1,23],41:[1,24],43:[1,25]},{5:[2,46],15:[2,46],16:[2,46],23:[2,46],30:[2,46],31:[2,46],33:[2,46],42:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46]},{13:[1,53]},{13:[2,6]},{5:[2,13],11:[2,13],13:[2,13],16:[2,13],18:[2,13],22:[2,13],28:[2,13],32:[2,13],34:[2,13],36:[2,13],40:[2,13],41:[2,13],43:[2,13]},{18:[1,14],25:54},{16:[1,55],23:[1,56]},{13:[1,26],18:[1,22],22:[1,27],27:57,40:[1,23],41:[1,24],43:[1,25]},{13:[1,26],18:[1,22],22:[1,27],27:58,40:[1,23],41:[1,24],43:[1,25]},{13:[1,26],18:[1,22],22:[1,27],27:59,40:[1,23],41:[1,24],43:[1,25]},{13:[1,26],18:[1,22],22:[1,27],27:60,40:[1,23],41:[1,24],43:[1,25]},{13:[1,26],18:[1,22],22:[1,27],27:61,40:[1,23],41:[1,24],43:[1,25]},{5:[2,42],15:[2,42],16:[2,42],23:[2,42],30:[2,42],31:[2,42],33:[2,42],42:[2,42],43:[2,42],44:[2,42],45:[2,42],46:[2,42],47:[2,42],48:[2,42]},{5:[2,43],15:[2,43],16:[2,43],23:[2,43],30:[2,43],31:[2,43],33:[2,43],42:[2,43],43:[2,43],44:[2,43],45:[2,43],46:[2,43],47:[2,43],48:[2,43]},{30:[1,62]},{38:[1,63]},{38:[1,64]},{13:[1,26],18:[1,22],22:[1,27],27:65,40:[1,23],41:[1,24],43:[1,25]},{33:[1,66]},{16:[1,67]},{16:[2,15]},{13:[1,68]},{13:[1,26],18:[1,22],22:[1,27],27:69,40:[1,23],41:[1,24],43:[1,25]},{13:[1,26],18:[1,22],22:[1,27],27:70,40:[1,23],41:[1,24],43:[1,25]},{13:[1,26],18:[1,22],22:[1,27],27:71,40:[1,23],41:[1,24],43:[1,25]},{5:[2,44],15:[2,44],16:[2,44],23:[2,44],30:[2,44],31:[2,44],33:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[1,38],48:[2,44]},{15:[1,72],42:[1,33],43:[1,34],44:[1,35],45:[1,36],46:[1,37],47:[1,38],48:[1,39]},{14:73,15:[2,24],17:74,18:[1,75]},{5:[2,14],11:[2,14],13:[2,14],16:[2,14],18:[2,14],22:[2,14],28:[2,14],32:[2,14],34:[2,14],36:[2,14],40:[2,14],41:[2,14],43:[2,14]},{5:[2,9],11:[2,9],13:[2,9],16:[2,9],18:[2,9],22:[2,9],24:[2,9],28:[2,9],32:[2,9],34:[2,9],36:[2,9],40:[2,9],41:[2,9],43:[2,9]},{18:[1,9],20:76},{5:[2,37],15:[2,37],16:[2,37],23:[2,37],30:[2,37],31:[2,37],33:[2,37],42:[2,37],43:[2,37],44:[1,35],45:[1,36],46:[1,37],47:[1,38],48:[1,39]},{5:[2,38],15:[2,38],16:[2,38],23:[2,38],30:[2,38],31:[2,38],33:[2,38],42:[2,38],43:[2,38],44:[1,35],45:[1,36],46:[1,37],47:[1,38],48:[1,39]},{5:[2,39],15:[2,39],16:[2,39],23:[2,39],30:[2,39],31:[2,39],33:[2,39],42:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[1,37],47:[1,38],48:[1,39]},{5:[2,40],15:[2,40],16:[2,40],23:[2,40],30:[2,40],31:[2,40],33:[2,40],42:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[1,37],47:[1,38],48:[1,39]},{5:[2,41],15:[2,41],16:[2,41],23:[2,41],30:[2,41],31:[2,41],33:[2,41],42:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[1,38],48:[1,39]},{5:[2,17],10:77,13:[1,26],16:[2,17],18:[1,22],22:[1,27],27:17,28:[1,18],31:[2,17],32:[1,19],34:[1,20],36:[1,21],40:[1,23],41:[1,24],43:[1,25]},{22:[1,78]},{18:[1,80],22:[1,79]},{30:[2,33],33:[2,33],42:[1,33],43:[1,34],44:[1,35],45:[1,36],46:[1,37],47:[1,38],48:[1,39]},{5:[2,17],10:81,13:[1,26],16:[2,17],18:[1,22],22:[1,27],27:17,28:[1,18],31:[2,17],32:[1,19],34:[1,20],36:[1,21],40:[1,23],41:[1,24],43:[1,25]},{10:83,13:[1,26],16:[2,17],18:[1,22],22:[1,27],27:17,28:[1,18],32:[1,19],34:[1,20],35:[1,82],36:[1,21],40:[1,23],41:[1,24],43:[1,25]},{13:[1,26],15:[2,27],18:[1,22],22:[1,27],27:85,37:84,40:[1,23],41:[1,24],43:[1,25]},{5:[2,34],15:[2,34],16:[2,34],23:[2,34],30:[2,34],31:[2,34],33:[2,34],42:[1,33],43:[1,34],44:[1,35],45:[1,36],46:[1,37],47:[1,38],48:[1,39]},{5:[2,35],15:[2,35],16:[2,35],23:[2,35],30:[2,35],31:[2,35],33:[2,35],42:[1,33],43:[1,34],44:[1,35],45:[1,36],46:[1,37],47:[1,38],48:[1,39]},{5:[2,36],15:[2,36],16:[2,36],23:[2,36],30:[2,36],31:[2,36],33:[2,36],42:[1,33],43:[1,34],44:[1,35],45:[1,36],46:[1,37],47:[1,38],48:[1,39]},{5:[2,45],15:[2,45],16:[2,45],23:[2,45],30:[2,45],31:[2,45],33:[2,45],42:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45]},{15:[1,86]},{15:[2,5]},{15:[2,25],23:[1,87]},{5:[2,10],11:[2,10],13:[2,10],16:[2,10],18:[2,10],22:[2,10],24:[2,10],28:[2,10],32:[2,10],34:[2,10],36:[2,10],40:[2,10],41:[2,10],43:[2,10]},{5:[2,20],16:[2,20],31:[1,88]},{30:[2,30],33:[2,30]},{30:[2,31],33:[2,31]},{30:[2,32],33:[2,32]},{5:[2,21],16:[2,21],31:[2,21]},{5:[2,22],16:[2,22],31:[2,22]},{16:[2,16]},{15:[1,89]},{15:[2,28],23:[1,90],42:[1,33],43:[1,34],44:[1,35],45:[1,36],46:[1,37],47:[1,38],48:[1,39]},{16:[1,91]},{15:[2,24],17:92,18:[1,75]},{5:[2,17],10:93,13:[1,26],16:[2,17],18:[1,22],22:[1,27],27:17,28:[1,18],31:[2,17],32:[1,19],34:[1,20],36:[1,21],40:[1,23],41:[1,24],43:[1,25]},{5:[2,23],16:[2,23],31:[2,23]},{13:[1,26],15:[2,27],18:[1,22],22:[1,27],27:85,37:94,40:[1,23],41:[1,24],43:[1,25]},{4:95,7:3,11:[2,7],13:[2,7],16:[2,7],18:[2,7],19:[1,4],22:[2,7],24:[2,7],28:[2,7],32:[2,7],34:[2,7],36:[2,7],40:[2,7],41:[2,7],43:[2,7]},{15:[2,26]},{5:[2,19],16:[2,19],31:[2,19]},{15:[2,29]},{16:[1,96]},{5:[2,4],13:[2,4],16:[2,4],18:[2,4],22:[2,4],28:[2,4],32:[2,4],34:[2,4],36:[2,4],40:[2,4],41:[2,4],43:[2,4]}],
defaultActions: {10:[2,1],29:[2,6],46:[2,15],74:[2,5],83:[2,16],92:[2,26],94:[2,29]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


var symbolTables = [{name: 'global', father: null , vars: {}}];

var scope = 0;

var symbol_table = symbolTables[scope];

function get_Scope(){
  return scope;
}

function makeScope(id){

  scope++;
  symbolTables.push({name: id, father: symbol_table.name, vars: {}});
  symbol_table = symbolTables[scope];

}

function scopeUp(){
  scope--;
  return scope;
}

function findDef(id){

  var f = id;
  var s = scope;
  
  while(s >= 0){
    for (var i in symbolTables[s].vars){
      if(i == f)
	return;
    }
    s--;
  }
   
  throw new Error( f + " is not defined.");

}

function fact (n) { 
  return n==0 ? 1 : fact(n-1) * n 
}
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var reserved_words = { PI: 'PI', E : 'E', IF: 'if', THEN: 'then', ELSE: 'else', WHILE: 'while', DO: 'do', BEGIN: 'begin' , END: 'end' ,
			CALL: 'call', VAR: 'var' , ODD: 'odd', CONST: 'const', PROCEDURE: 'procedure' }

function idORrw(x) {
  return (x.toUpperCase() in reserved_words)? x.toUpperCase() : 'ID'
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and comments */
break;
case 1:return 22
break;
case 2:return 38
break;
case 3:return idORrw(yy_.yytext)
break;
case 4:return yy_.yytext;
break;
case 5:return 23
break;
case 6:return 5
break;
case 7:return 6
break;
case 8:return 'INVALID'
break;
}
},
rules: [/^(?:\s+|#.*)/,/^(?:\b\d+(\.\d*)?([eE][-+]?\d+)?\b)/,/^(?:[!<>=]=|[<>])/,/^(?:\b[A-Za-z_]\w*\b)/,/^(?:[-*/+^!%=();])/,/^(?:[,])/,/^(?:[.])/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calculator;
exports.Parser = calculator.Parser;
exports.parse = function () { return calculator.parse.apply(calculator, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}